{"version":3,"file":"static/js/165.5116ecc1.chunk.js","mappings":"wRAGaA,GAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,wGAMbE,GAAQF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,qFAMLI,GAAWJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,8DAIRM,EAAMN,EAAAA,GAAAA,OAAH,8D,mBCZZO,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,MAAOF,EAAAA,KAAaG,aAGhBC,EAAgB,CACpBF,MAAO,IA+BT,EA5BoB,WAClB,OAAwCG,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACAC,QAAQC,IAAIH,GAQZ,OACE,SAAC,KAAD,CACEF,cAAeA,EACfM,iBAAkBX,EAClBY,SAViB,SAACC,EAAQC,GAC5BA,EAAQC,YACRN,QAAQC,IAAIG,GACZL,EAAgB,CAAEL,MAAOU,EAAOV,OACjC,EAGC,UAKE,UAACX,EAAD,YACE,mBAAOwB,QAAQ,QAAf,WACE,SAACrB,EAAD,CAAOsB,KAAK,OAAOC,KAAK,QAAQC,YAAY,kBAC5C,SAACtB,EAAD,CAAUqB,KAAK,QAAQE,UAAU,aAGnC,SAACrB,EAAD,CAAKkB,KAAK,SAAV,8BAIP,E,UCnCc,SAASI,IACtB,OAAuBf,EAAAA,EAAAA,MACjBY,GADN,eAC0BI,IAAI,SAEtBC,GADSC,EAAAA,EAAAA,MACTD,SACR,GAAwBE,EAAAA,EAAAA,YAAxB,eAAOC,EAAP,KAAaC,EAAb,KAcA,OAXAC,EAAAA,EAAAA,YAAU,WACHV,GAGLW,EAAAA,EAAAA,IAAaN,EAAUL,GAAMY,MAAK,SAAAC,GAChCJ,GAAQ,OAAII,EAAIL,KAAKM,UAErBvB,QAAQC,IAAIqB,EACb,GACF,GAAE,CAACb,EAAMK,KAGR,4BACE,SAAC,EAAD,KACA,SAACU,EAAA,EAAD,CAAWP,KAAMA,MAGtB,C,wFC3Bc,SAASO,EAAT,GAA8B,IAATP,EAAQ,EAARA,KAC5BQ,GAAWV,EAAAA,EAAAA,MACjB,OACE,wBACGE,GACCA,EAAKS,KAAI,SAAAC,GAAI,OACX,yBACE,SAAC,KAAD,CACEC,GAAE,kBAAaD,EAAKE,IACpBC,MAAO,CACLC,SAAUJ,EAAKE,GACfG,KAAMP,GAJV,UAOE,uBAAIE,EAAKM,WARJN,EAAKE,GADH,KAepB,C,uBCxBD,IAAMK,EAAQC,EAAQ,MAChBC,EAAU,mCAChBF,EAAMG,SAASC,QAAU,gCA0CzB,IAAMC,EAAW,CACfC,IAzCF,SAAaC,EAAOV,GAClB,IAAIW,GAAW,EAMf,OAAQD,GACN,IAAK,IACHC,EAAQ,qCAAiCN,GACzC,MAEF,IAAI,UACFM,EAAQ,+BAA2BN,EAA3B,iCAA2DL,EAA3D,8BAER,MACF,IAAI,WACFW,EAAQ,gBAAYX,EAAZ,oBAAgCK,GAExC,MACF,IAAI,WAAJ,OAAgBL,EAAhB,WACEW,EAAQ,gBAAYX,EAAZ,4BAAwCK,GAChD,MACF,IAAI,WAAJ,OAAgBL,EAAhB,SACEW,EAAQ,gBAAYX,EAAZ,4BAAwCK,GAEhD,MACF,QAEE,YADApC,QAAQC,IAAI,OAIhB,GAAIyC,EACF,OAAOR,EAAMrB,IAAN,UAAa6B,IAAYrB,MAAK,SAAAsB,GAEnC,OAAOA,CACR,GAEJ,GAMD,K","sources":["components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.jsx","Pages/Movies/Movies.jsx","components/MovieList/MovieList.jsx","services/API.js"],"sourcesContent":["import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormContainer = styled(Form)`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nexport const Input = styled(Field)`\n  min-width: 300px;\n  padding: 5px;\n  margin-right: 20px;\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  color: red;\n  font-style: italic;\n`;\nexport const Btn = styled.button`\n  margin-top: 20px;\n  padding: 5px;\n`;\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { FormContainer, Btn, Input, ErrorMsg } from './SearchBar.styled';\n\nimport * as yup from 'yup';\n\nlet schema = yup.object().shape({\n  query: yup.string().required(),\n});\n\nconst initialValues = {\n  query: '',\n};\n\nconst SearchQuery = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  console.log(searchParams);\n\n  const handleSubmit = (values, actions) => {\n    actions.resetForm();\n    console.log(values);\n    setSearchParams({ query: values.query });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormContainer>\n        <label htmlFor=\"query\">\n          <Input type=\"text\" name=\"query\" placeholder=\"Search movie\" />\n          <ErrorMsg name=\"query\" component=\"span\" />\n        </label>\n\n        <Btn type=\"submit\">Search movie</Btn>\n      </FormContainer>\n    </Formik>\n  );\n};\n\nexport default SearchQuery;\n","import MovieAPI from 'services/API';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport SearchQuery from 'components/SearchBar/SearchBar';\nimport MovieList from 'components/MovieList';\n\nexport default function Movies() {\n  const [searchParams] = useSearchParams();\n  const name = searchParams.get('query');\n  const location = useLocation();\n  const { pathname } = location;\n  const [data, setData] = useState();\n  // console.log(pathname);\n\n  useEffect(() => {\n    if (!name) {\n      return;\n    }\n    MovieAPI.api(pathname, name).then(res => {\n      setData([...res.data.results]);\n\n      console.log(res);\n    });\n  }, [name, pathname]);\n\n  return (\n    <div>\n      <SearchQuery />\n      <MovieList data={data} />\n    </div>\n  );\n}\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nexport default function MovieList({ data }) {\n  const location = useLocation();\n  return (\n    <ul>\n      {data &&\n        data.map(item => (\n          <li key={item.id}>\n            <Link\n              to={`/movies/${item.id}`}\n              state={{\n                movie_id: item.id,\n                from: location,\n              }}\n            >\n              <p>{item.title}</p>\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nMovieList.propTypes = {\n  data: PropTypes.array,\n};\n","const axios = require('axios');\nconst API_KEY = 'f3d33ff00cd7667f5ad243a04605493c';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nfunction api(param, movie_id) {\n  let pathLink = false;\n\n  //   console.log(typeof param);\n  //   console.log(typeof `/movies/${movie_id}`);\n  //   console.log(param === `/movies/${movie_id}`);\n\n  switch (param) {\n    case '/':\n      pathLink = `trending/movie/day?api_key=${API_KEY}`;\n      break;\n\n    case `/movies`:\n      pathLink = `search/movie?api_key=${API_KEY}&language=en-US&query=${movie_id}&page=1&include_adult=true`;\n\n      break;\n    case `/movies/`:\n      pathLink = `movie/${movie_id}?api_key=${API_KEY}`;\n\n      break;\n    case `/movies/${movie_id}/review`:\n      pathLink = `movie/${movie_id}/reviews?api_key=${API_KEY}`;\n      break;\n    case `/movies/${movie_id}/cast`:\n      pathLink = `movie/${movie_id}/credits?api_key=${API_KEY}`;\n\n      break;\n    default:\n      console.log('NOT');\n      return;\n  }\n\n  if (pathLink) {\n    return axios.get(`${pathLink}`).then(response => {\n      //   console.log(response);\n      return response;\n    });\n  }\n}\n\nconst FetchAPI = {\n  api,\n};\n\nexport default FetchAPI;\n"],"names":["FormContainer","styled","Form","Input","Field","ErrorMsg","ErrorMessage","Btn","schema","yup","shape","query","required","initialValues","useSearchParams","searchParams","setSearchParams","console","log","validationSchema","onSubmit","values","actions","resetForm","htmlFor","type","name","placeholder","component","Movies","get","pathname","useLocation","useState","data","setData","useEffect","MovieAPI","then","res","results","MovieList","location","map","item","to","id","state","movie_id","from","title","axios","require","API_KEY","defaults","baseURL","FetchAPI","api","param","pathLink","response"],"sourceRoot":""}