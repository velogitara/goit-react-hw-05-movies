{"version":3,"file":"static/js/622.1e7282ab.chunk.js","mappings":"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","sources":["components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.jsx","Pages/Movies/Movies.styled.js","Pages/Movies/Movies.jsx","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","services/API.js"],"sourcesContent":["import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormContainer = styled(Form)`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nexport const Input = styled(Field)`\n  min-width: 300px;\n  padding: 5px;\n  margin-right: 20px;\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  color: red;\n  font-style: italic;\n`;\nexport const Btn = styled.button`\n  margin-top: 20px;\n  margin-bottom: 20px;\n  padding: 5px;\n`;\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { FormContainer, Btn, Input, ErrorMsg } from './SearchBar.styled';\n\nimport * as yup from 'yup';\n\nlet schema = yup.object().shape({\n  query: yup.string().lowercase().trim().required(),\n});\n\nconst SearchQuery = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const getQ = searchParams.get('query');\n  const initialValues = {\n    query: getQ || '',\n  };\n\n  const handleSubmit = (values, actions) => {\n    setSearchParams({ query: values.query.toLowerCase().trim() });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormContainer>\n        <label htmlFor=\"query\">\n          <Input type=\"text\" name=\"query\" placeholder=\"Search movie\" />\n          <ErrorMsg name=\"query\" component=\"span\" />\n        </label>\n\n        <Btn type=\"submit\">Search movie</Btn>\n      </FormContainer>\n    </Formik>\n  );\n};\n\nexport default SearchQuery;\n\n// SearchQuery.propTypes = {\n//   getSearchQueryBar: PropTypes.func.isRequired,\n// };\n","import styled from 'styled-components';\n\nexport const MovieContainer = styled.div`\n  margin-left: 20px;\n`;\n","import MovieAPI from 'services/API';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport SearchQuery from 'components/SearchBar/SearchBar';\nimport MovieList from 'components/MovieList';\nimport { MovieContainer } from './Movies.styled';\n\nexport default function Movies({ getSearchQueryBar }) {\n  const [searchParams] = useSearchParams();\n  const name = searchParams.get('query') || '';\n  const location = useLocation();\n  const { pathname } = location;\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (!name) {\n      setData([]);\n      return;\n    }\n    MovieAPI.api(pathname, name).then(res => {\n      if (!res.data.results.length) {\n        setData([]);\n\n        // console.log('пусто');\n        return;\n      }\n      setData([...res.data.results]);\n\n      // console.log('есть запрос');\n    });\n  }, [name, pathname]);\n\n  return (\n    <MovieContainer>\n      <SearchQuery getSearchQueryBar={getSearchQueryBar} />\n      {data.length ? (\n        <MovieList data={data} />\n      ) : (\n        name && data.id && <p>нет такого в поиске</p>\n      )}\n    </MovieContainer>\n  );\n}\n","import styled from 'styled-components';\n// import { Link } from 'react-router-dom';\n\nexport const P = styled.p`\n  color: #000;\n  font-size: larger;\n\n  :hover {\n    color: green;\n    text-decoration: underline;\n  }\n`;\n\nexport const List = styled.ul`\n  margin-left: 20px;\n`;\n\nexport const Items = styled.li`\n  :not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { P, List, Items } from './MovieList.styled';\n\nexport default function MovieList({ data }) {\n  const location = useLocation();\n  return (\n    <List>\n      {data.map(item => (\n        <Items key={item.id}>\n          <Link\n            to={`/movies/${item.id}`}\n            state={{\n              movie_id: item.id,\n              from: location,\n            }}\n          >\n            <P>{item.title}</P>\n          </Link>\n        </Items>\n      ))}\n    </List>\n  );\n}\n\nMovieList.propTypes = {\n  data: PropTypes.array,\n};\n","const axios = require('axios');\nconst API_KEY = 'f3d33ff00cd7667f5ad243a04605493c';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nfunction api(param, movie_id) {\n  let pathLink = false;\n\n  //   console.log(typeof param);\n  //   console.log(typeof `/movies/${movie_id}`);\n  //   console.log(param === `/movies/${movie_id}`);\n\n  switch (param) {\n    case '/':\n      pathLink = `trending/movie/day?api_key=${API_KEY}`;\n      break;\n\n    case `/movies`:\n      pathLink = `search/movie?api_key=${API_KEY}&language=en-US&query=${movie_id}&page=1&include_adult=false`;\n\n      break;\n    case `/movies/`:\n      pathLink = `movie/${movie_id}?api_key=${API_KEY}`;\n\n      break;\n    case `/movies/${movie_id}/review`:\n      pathLink = `movie/${movie_id}/reviews?api_key=${API_KEY}`;\n      break;\n    case `/movies/${movie_id}/cast`:\n      pathLink = `movie/${movie_id}/credits?api_key=${API_KEY}`;\n\n      break;\n    default:\n      console.log('NOT');\n      return;\n  }\n\n  if (pathLink) {\n    return axios.get(`${pathLink}`).then(response => {\n      //   console.log(response);\n      return response;\n    });\n  }\n}\n\nconst FetchAPI = {\n  api,\n};\n\nexport default FetchAPI;\n"],"names":["FormContainer","styled","Form","Input","Field","ErrorMsg","ErrorMessage","Btn","schema","yup","shape","query","lowercase","trim","required","useSearchParams","searchParams","setSearchParams","initialValues","get","validationSchema","onSubmit","values","actions","toLowerCase","htmlFor","type","name","placeholder","component","MovieContainer","Movies","getSearchQueryBar","pathname","useLocation","useState","data","setData","useEffect","MovieAPI","then","res","results","length","MovieList","id","P","List","Items","location","map","item","to","state","movie_id","from","title","axios","require","API_KEY","defaults","baseURL","FetchAPI","api","param","pathLink","console","log","response"],"sourceRoot":""}